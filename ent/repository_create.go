// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tonymj76/savannah/ent/gitcommit"
	"github.com/tonymj76/savannah/ent/repository"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RepositoryCreate) SetName(s string) *RepositoryCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RepositoryCreate) SetDescription(s string) *RepositoryCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetURL sets the "URL" field.
func (rc *RepositoryCreate) SetURL(s string) *RepositoryCreate {
	rc.mutation.SetURL(s)
	return rc
}

// SetLanguage sets the "language" field.
func (rc *RepositoryCreate) SetLanguage(s string) *RepositoryCreate {
	rc.mutation.SetLanguage(s)
	return rc
}

// SetOpenIssuesCount sets the "open_issues_count" field.
func (rc *RepositoryCreate) SetOpenIssuesCount(i int) *RepositoryCreate {
	rc.mutation.SetOpenIssuesCount(i)
	return rc
}

// SetWatchersCount sets the "watchers_count" field.
func (rc *RepositoryCreate) SetWatchersCount(i int) *RepositoryCreate {
	rc.mutation.SetWatchersCount(i)
	return rc
}

// SetStarCount sets the "star_count" field.
func (rc *RepositoryCreate) SetStarCount(i int) *RepositoryCreate {
	rc.mutation.SetStarCount(i)
	return rc
}

// SetForksCount sets the "forks_count" field.
func (rc *RepositoryCreate) SetForksCount(i int) *RepositoryCreate {
	rc.mutation.SetForksCount(i)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RepositoryCreate) SetCreatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RepositoryCreate) SetUpdatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// AddGitCommitIDs adds the "gitCommits" edge to the GitCommit entity by IDs.
func (rc *RepositoryCreate) AddGitCommitIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddGitCommitIDs(ids...)
	return rc
}

// AddGitCommits adds the "gitCommits" edges to the GitCommit entity.
func (rc *RepositoryCreate) AddGitCommits(g ...*GitCommit) *RepositoryCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rc.AddGitCommitIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Repository.name"`)}
	}
	if _, ok := rc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Repository.description"`)}
	}
	if _, ok := rc.mutation.URL(); !ok {
		return &ValidationError{Name: "URL", err: errors.New(`ent: missing required field "Repository.URL"`)}
	}
	if _, ok := rc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Repository.language"`)}
	}
	if _, ok := rc.mutation.OpenIssuesCount(); !ok {
		return &ValidationError{Name: "open_issues_count", err: errors.New(`ent: missing required field "Repository.open_issues_count"`)}
	}
	if _, ok := rc.mutation.WatchersCount(); !ok {
		return &ValidationError{Name: "watchers_count", err: errors.New(`ent: missing required field "Repository.watchers_count"`)}
	}
	if _, ok := rc.mutation.StarCount(); !ok {
		return &ValidationError{Name: "star_count", err: errors.New(`ent: missing required field "Repository.star_count"`)}
	}
	if _, ok := rc.mutation.ForksCount(); !ok {
		return &ValidationError{Name: "forks_count", err: errors.New(`ent: missing required field "Repository.forks_count"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Repository.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Repository.updated_at"`)}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(repository.Table, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.URL(); ok {
		_spec.SetField(repository.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := rc.mutation.Language(); ok {
		_spec.SetField(repository.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := rc.mutation.OpenIssuesCount(); ok {
		_spec.SetField(repository.FieldOpenIssuesCount, field.TypeInt, value)
		_node.OpenIssuesCount = value
	}
	if value, ok := rc.mutation.WatchersCount(); ok {
		_spec.SetField(repository.FieldWatchersCount, field.TypeInt, value)
		_node.WatchersCount = value
	}
	if value, ok := rc.mutation.StarCount(); ok {
		_spec.SetField(repository.FieldStarCount, field.TypeInt, value)
		_node.StarCount = value
	}
	if value, ok := rc.mutation.ForksCount(); ok {
		_spec.SetField(repository.FieldForksCount, field.TypeInt, value)
		_node.ForksCount = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rc.mutation.GitCommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.GitCommitsTable,
			Columns: []string{repository.GitCommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gitcommit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	err      error
	builders []*RepositoryCreate
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
