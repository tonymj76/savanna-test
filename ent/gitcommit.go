// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tonymj76/savannah/ent/gitcommit"
)

// GitCommit is the model entity for the GitCommit schema.
type GitCommit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Author holds the value of the "author" field.
	Author any `json:"author,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Date holds the value of the "date" field.
	Date                   time.Time `json:"date,omitempty"`
	repository_git_commits *int
	selectValues           sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GitCommit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gitcommit.FieldAuthor:
			values[i] = new([]byte)
		case gitcommit.FieldID:
			values[i] = new(sql.NullInt64)
		case gitcommit.FieldURL:
			values[i] = new(sql.NullString)
		case gitcommit.FieldDate:
			values[i] = new(sql.NullTime)
		case gitcommit.ForeignKeys[0]: // repository_git_commits
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GitCommit fields.
func (gc *GitCommit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gitcommit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gc.ID = int(value.Int64)
		case gitcommit.FieldAuthor:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gc.Author); err != nil {
					return fmt.Errorf("unmarshal field author: %w", err)
				}
			}
		case gitcommit.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				gc.URL = value.String
			}
		case gitcommit.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				gc.Date = value.Time
			}
		case gitcommit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_git_commits", value)
			} else if value.Valid {
				gc.repository_git_commits = new(int)
				*gc.repository_git_commits = int(value.Int64)
			}
		default:
			gc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GitCommit.
// This includes values selected through modifiers, order, etc.
func (gc *GitCommit) Value(name string) (ent.Value, error) {
	return gc.selectValues.Get(name)
}

// Update returns a builder for updating this GitCommit.
// Note that you need to call GitCommit.Unwrap() before calling this method if this GitCommit
// was returned from a transaction, and the transaction was committed or rolled back.
func (gc *GitCommit) Update() *GitCommitUpdateOne {
	return NewGitCommitClient(gc.config).UpdateOne(gc)
}

// Unwrap unwraps the GitCommit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gc *GitCommit) Unwrap() *GitCommit {
	_tx, ok := gc.config.driver.(*txDriver)
	if !ok {
		panic("ent: GitCommit is not a transactional entity")
	}
	gc.config.driver = _tx.drv
	return gc
}

// String implements the fmt.Stringer.
func (gc *GitCommit) String() string {
	var builder strings.Builder
	builder.WriteString("GitCommit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gc.ID))
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", gc.Author))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(gc.URL)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(gc.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GitCommits is a parsable slice of GitCommit.
type GitCommits []*GitCommit
