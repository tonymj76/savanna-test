// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tonymj76/savannah/ent/commit"
)

// Commit is the model entity for the Commit schema.
type Commit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Author holds the value of the "author" field.
	Author any `json:"author,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Date holds the value of the "date" field.
	Date               time.Time `json:"date,omitempty"`
	repository_commits *int
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Commit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commit.FieldAuthor:
			values[i] = new([]byte)
		case commit.FieldID:
			values[i] = new(sql.NullInt64)
		case commit.FieldURL:
			values[i] = new(sql.NullString)
		case commit.FieldDate:
			values[i] = new(sql.NullTime)
		case commit.ForeignKeys[0]: // repository_commits
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Commit fields.
func (c *Commit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case commit.FieldAuthor:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Author); err != nil {
					return fmt.Errorf("unmarshal field author: %w", err)
				}
			}
		case commit.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				c.URL = value.String
			}
		case commit.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				c.Date = value.Time
			}
		case commit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_commits", value)
			} else if value.Valid {
				c.repository_commits = new(int)
				*c.repository_commits = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Commit.
// This includes values selected through modifiers, order, etc.
func (c *Commit) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Commit.
// Note that you need to call Commit.Unwrap() before calling this method if this Commit
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Commit) Update() *CommitUpdateOne {
	return NewCommitClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Commit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Commit) Unwrap() *Commit {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Commit is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Commit) String() string {
	var builder strings.Builder
	builder.WriteString("Commit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", c.Author))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(c.URL)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(c.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Commits is a parsable slice of Commit.
type Commits []*Commit
