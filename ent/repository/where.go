// Code generated by ent, DO NOT EDIT.

package repository

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tonymj76/savannah/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDescription, v))
}

// URL applies equality check predicate on the "URL" field. It's identical to URLEQ.
func URL(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldURL, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLanguage, v))
}

// OpenIssuesCount applies equality check predicate on the "open_issues_count" field. It's identical to OpenIssuesCountEQ.
func OpenIssuesCount(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOpenIssuesCount, v))
}

// WatchersCount applies equality check predicate on the "watchers_count" field. It's identical to WatchersCountEQ.
func WatchersCount(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldWatchersCount, v))
}

// StarCount applies equality check predicate on the "star_count" field. It's identical to StarCountEQ.
func StarCount(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStarCount, v))
}

// ForksCount applies equality check predicate on the "forks_count" field. It's identical to ForksCountEQ.
func ForksCount(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldForksCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldDescription, v))
}

// URLEQ applies the EQ predicate on the "URL" field.
func URLEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "URL" field.
func URLNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "URL" field.
func URLIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "URL" field.
func URLNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "URL" field.
func URLGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "URL" field.
func URLGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "URL" field.
func URLLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "URL" field.
func URLLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "URL" field.
func URLContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "URL" field.
func URLHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "URL" field.
func URLHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "URL" field.
func URLEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "URL" field.
func URLContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldURL, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldLanguage, v))
}

// OpenIssuesCountEQ applies the EQ predicate on the "open_issues_count" field.
func OpenIssuesCountEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOpenIssuesCount, v))
}

// OpenIssuesCountNEQ applies the NEQ predicate on the "open_issues_count" field.
func OpenIssuesCountNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldOpenIssuesCount, v))
}

// OpenIssuesCountIn applies the In predicate on the "open_issues_count" field.
func OpenIssuesCountIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldOpenIssuesCount, vs...))
}

// OpenIssuesCountNotIn applies the NotIn predicate on the "open_issues_count" field.
func OpenIssuesCountNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldOpenIssuesCount, vs...))
}

// OpenIssuesCountGT applies the GT predicate on the "open_issues_count" field.
func OpenIssuesCountGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldOpenIssuesCount, v))
}

// OpenIssuesCountGTE applies the GTE predicate on the "open_issues_count" field.
func OpenIssuesCountGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldOpenIssuesCount, v))
}

// OpenIssuesCountLT applies the LT predicate on the "open_issues_count" field.
func OpenIssuesCountLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldOpenIssuesCount, v))
}

// OpenIssuesCountLTE applies the LTE predicate on the "open_issues_count" field.
func OpenIssuesCountLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldOpenIssuesCount, v))
}

// WatchersCountEQ applies the EQ predicate on the "watchers_count" field.
func WatchersCountEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldWatchersCount, v))
}

// WatchersCountNEQ applies the NEQ predicate on the "watchers_count" field.
func WatchersCountNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldWatchersCount, v))
}

// WatchersCountIn applies the In predicate on the "watchers_count" field.
func WatchersCountIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldWatchersCount, vs...))
}

// WatchersCountNotIn applies the NotIn predicate on the "watchers_count" field.
func WatchersCountNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldWatchersCount, vs...))
}

// WatchersCountGT applies the GT predicate on the "watchers_count" field.
func WatchersCountGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldWatchersCount, v))
}

// WatchersCountGTE applies the GTE predicate on the "watchers_count" field.
func WatchersCountGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldWatchersCount, v))
}

// WatchersCountLT applies the LT predicate on the "watchers_count" field.
func WatchersCountLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldWatchersCount, v))
}

// WatchersCountLTE applies the LTE predicate on the "watchers_count" field.
func WatchersCountLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldWatchersCount, v))
}

// StarCountEQ applies the EQ predicate on the "star_count" field.
func StarCountEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldStarCount, v))
}

// StarCountNEQ applies the NEQ predicate on the "star_count" field.
func StarCountNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldStarCount, v))
}

// StarCountIn applies the In predicate on the "star_count" field.
func StarCountIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldStarCount, vs...))
}

// StarCountNotIn applies the NotIn predicate on the "star_count" field.
func StarCountNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldStarCount, vs...))
}

// StarCountGT applies the GT predicate on the "star_count" field.
func StarCountGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldStarCount, v))
}

// StarCountGTE applies the GTE predicate on the "star_count" field.
func StarCountGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldStarCount, v))
}

// StarCountLT applies the LT predicate on the "star_count" field.
func StarCountLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldStarCount, v))
}

// StarCountLTE applies the LTE predicate on the "star_count" field.
func StarCountLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldStarCount, v))
}

// ForksCountEQ applies the EQ predicate on the "forks_count" field.
func ForksCountEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldForksCount, v))
}

// ForksCountNEQ applies the NEQ predicate on the "forks_count" field.
func ForksCountNEQ(v int) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldForksCount, v))
}

// ForksCountIn applies the In predicate on the "forks_count" field.
func ForksCountIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldForksCount, vs...))
}

// ForksCountNotIn applies the NotIn predicate on the "forks_count" field.
func ForksCountNotIn(vs ...int) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldForksCount, vs...))
}

// ForksCountGT applies the GT predicate on the "forks_count" field.
func ForksCountGT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldForksCount, v))
}

// ForksCountGTE applies the GTE predicate on the "forks_count" field.
func ForksCountGTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldForksCount, v))
}

// ForksCountLT applies the LT predicate on the "forks_count" field.
func ForksCountLT(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldForksCount, v))
}

// ForksCountLTE applies the LTE predicate on the "forks_count" field.
func ForksCountLTE(v int) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldForksCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasGitCommits applies the HasEdge predicate on the "gitCommits" edge.
func HasGitCommits() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GitCommitsTable, GitCommitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGitCommitsWith applies the HasEdge predicate on the "gitCommits" edge with a given conditions (other predicates).
func HasGitCommitsWith(preds ...predicate.GitCommit) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := newGitCommitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repository) predicate.Repository {
	return predicate.Repository(sql.NotPredicates(p))
}
