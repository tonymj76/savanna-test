// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tonymj76/savannah/ent/repository"
)

// Repository is the model entity for the Repository schema.
type Repository struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// URL holds the value of the "URL" field.
	URL string `json:"URL,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// OpenIssuesCount holds the value of the "open_issues_count" field.
	OpenIssuesCount int `json:"open_issues_count,omitempty"`
	// WatchersCount holds the value of the "watchers_count" field.
	WatchersCount int `json:"watchers_count,omitempty"`
	// StarCount holds the value of the "star_count" field.
	StarCount int `json:"star_count,omitempty"`
	// ForksCount holds the value of the "forks_count" field.
	ForksCount int `json:"forks_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepositoryQuery when eager-loading is set.
	Edges        RepositoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RepositoryEdges holds the relations/edges for other nodes in the graph.
type RepositoryEdges struct {
	// GitCommits holds the value of the gitCommits edge.
	GitCommits []*GitCommit `json:"gitCommits,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GitCommitsOrErr returns the GitCommits value or an error if the edge
// was not loaded in eager-loading.
func (e RepositoryEdges) GitCommitsOrErr() ([]*GitCommit, error) {
	if e.loadedTypes[0] {
		return e.GitCommits, nil
	}
	return nil, &NotLoadedError{edge: "gitCommits"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repository) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case repository.FieldID, repository.FieldOpenIssuesCount, repository.FieldWatchersCount, repository.FieldStarCount, repository.FieldForksCount:
			values[i] = new(sql.NullInt64)
		case repository.FieldName, repository.FieldDescription, repository.FieldURL, repository.FieldLanguage:
			values[i] = new(sql.NullString)
		case repository.FieldCreatedAt, repository.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repository fields.
func (r *Repository) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repository.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case repository.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case repository.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case repository.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field URL", values[i])
			} else if value.Valid {
				r.URL = value.String
			}
		case repository.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				r.Language = value.String
			}
		case repository.FieldOpenIssuesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field open_issues_count", values[i])
			} else if value.Valid {
				r.OpenIssuesCount = int(value.Int64)
			}
		case repository.FieldWatchersCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field watchers_count", values[i])
			} else if value.Valid {
				r.WatchersCount = int(value.Int64)
			}
		case repository.FieldStarCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field star_count", values[i])
			} else if value.Valid {
				r.StarCount = int(value.Int64)
			}
		case repository.FieldForksCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forks_count", values[i])
			} else if value.Valid {
				r.ForksCount = int(value.Int64)
			}
		case repository.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case repository.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Repository.
// This includes values selected through modifiers, order, etc.
func (r *Repository) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryGitCommits queries the "gitCommits" edge of the Repository entity.
func (r *Repository) QueryGitCommits() *GitCommitQuery {
	return NewRepositoryClient(r.config).QueryGitCommits(r)
}

// Update returns a builder for updating this Repository.
// Note that you need to call Repository.Unwrap() before calling this method if this Repository
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repository) Update() *RepositoryUpdateOne {
	return NewRepositoryClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Repository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Repository) Unwrap() *Repository {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Repository is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repository) String() string {
	var builder strings.Builder
	builder.WriteString("Repository(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("URL=")
	builder.WriteString(r.URL)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(r.Language)
	builder.WriteString(", ")
	builder.WriteString("open_issues_count=")
	builder.WriteString(fmt.Sprintf("%v", r.OpenIssuesCount))
	builder.WriteString(", ")
	builder.WriteString("watchers_count=")
	builder.WriteString(fmt.Sprintf("%v", r.WatchersCount))
	builder.WriteString(", ")
	builder.WriteString("star_count=")
	builder.WriteString(fmt.Sprintf("%v", r.StarCount))
	builder.WriteString(", ")
	builder.WriteString("forks_count=")
	builder.WriteString(fmt.Sprintf("%v", r.ForksCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Repositories is a parsable slice of Repository.
type Repositories []*Repository
